service: aws-node-rest-api-dynamodb-typescript

frameworkVersion: '3'

custom:
  tableName: 'Blogs-Table-${self:provider.stage}'
  tableName2: 'Users-Table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: Dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
          Resource:
            - { 'Fn::GetAtt': ['BlogsTable', 'Arn'] }
            - { 'Fn::GetAtt': ['UsersTable', 'Arn'] }
            - { 'Fn::GetAtt': ['MyQueue', 'Arn'] }
  environment:
    BLOGS_TABLE: ${self:custom.tableName}
    USERS_TABLE: ${self:custom.tableName2}
    JWT_SECRET: 'qwertyuygtfdscfvgbhnjmkmjhgfdxcfvgbhnjmk'
    QUEUE_URL: !Ref MyQueue

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  getAllBlogs:
    handler: src/controllers/getAllBlogs.getAllBlogs
    events:
      - http:
          path: /allblogs
          method: get
          cors: true
  createBlog:
    handler: src/handler.createBlog
    events:
      - http:
          path: /create
          method: post
          cors: true
  signUp:
    handler: src/handler.signUp
    events:
      - http:
          path: /signup
          method: post
          cors: true
  signIn:
    handler: src/handler.signIn
    events:
      - http:
          path: /signin
          method: post
          cors: true
  send:
    handler: src/additional/producer.producer
    timeout: 60
    events:
      - http:
          path: /send
          method: get
          cors: true
  receive:
    handler: src/additional/consumer.consumer
    timeout: 60
    events:
      - http:
          path: /receive
          method: get
          cors: true

resources:
  Resources:
    BlogsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName2}
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: my-fifo-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        VisibilityTimeout: 30
